// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_bin
List read_bin(const std::string& filepath_x, const std::string& filepath_y, const arma::uvec& bag, const int& x_dim);
RcppExport SEXP _moltenNMF_read_bin(SEXP filepath_xSEXP, SEXP filepath_ySEXP, SEXP bagSEXP, SEXP x_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filepath_x(filepath_xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filepath_y(filepath_ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type bag(bagSEXP);
    Rcpp::traits::input_parameter< const int& >::type x_dim(x_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bin(filepath_x, filepath_y, bag, x_dim));
    return rcpp_result_gen;
END_RCPP
}
// doVB_negbin
List doVB_negbin(const arma::vec& y, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_negbin(SEXP ySEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_negbin(y, xi, xp, varind, D, L, iter, a, b, V, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois
List doVB_pois(const arma::vec& y, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois(SEXP ySEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois(y, xi, xp, varind, D, L, iter, a, b, V, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_sp
List doVB_pois_sp(const int& N, const arma::vec& yv, const arma::uvec& yi, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_sp(SEXP NSEXP, SEXP yvSEXP, SEXP yiSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_sp(N, yv, yi, xi, xp, varind, D, L, iter, a, b, V, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_sp2
List doVB_pois_sp2(const int& N, const arma::vec& yv, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const arma::vec& probX0, const double& N0, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_sp2(SEXP NSEXP, SEXP yvSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP probX0SEXP, SEXP N0SEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probX0(probX0SEXP);
    Rcpp::traits::input_parameter< const double& >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_sp2(N, yv, xi, xp, varind, probX0, N0, D, L, iter, a, b, V, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_sp3
List doVB_pois_sp3(const int& N, const arma::vec& yv, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const arma::uvec& xp0, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_sp3(SEXP NSEXP, SEXP yvSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP xp0SEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp0(xp0SEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_sp3(N, yv, xi, xp, varind, xp0, D, L, iter, a, b, V, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_2D
List doVB_pois_2D(arma::field<arma::mat> V, const arma::vec& y, const arma::uvec& rowi, const arma::uvec& coli, const arma::uvec& dims, const int& L, const int& iter, const double& a, const double& b, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_2D(SEXP VSEXP, SEXP ySEXP, SEXP rowiSEXP, SEXP coliSEXP, SEXP dimsSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type rowi(rowiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type coli(coliSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_2D(V, y, rowi, coli, dims, L, iter, a, b, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_2D_ww
List doVB_pois_2D_ww(arma::field<arma::mat> V, const arma::vec& y, const arma::uvec& rowi, const arma::uvec& coli, const arma::uvec& dims, const int& L, const int& iter, const arma::field<arma::vec>& weight, const double& a, const double& b, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_2D_ww(SEXP VSEXP, SEXP ySEXP, SEXP rowiSEXP, SEXP coliSEXP, SEXP dimsSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP weightSEXP, SEXP aSEXP, SEXP bSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type rowi(rowiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type coli(coliSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_2D_ww(V, y, rowi, coli, dims, L, iter, weight, a, b, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_s_2D
List doVB_pois_s_2D(const arma::vec& y, const arma::uvec& rowi, const arma::uvec& coli, const int& L, const int& iter, const double& a, const double& b, const double& N1, const int& Nr, const int& Nc, const int& bsize, const arma::vec& lr_param, const std::string& lr_type, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_s_2D(SEXP ySEXP, SEXP rowiSEXP, SEXP coliSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP N1SEXP, SEXP NrSEXP, SEXP NcSEXP, SEXP bsizeSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type rowi(rowiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type coli(coliSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Nr(NrSEXP);
    Rcpp::traits::input_parameter< const int& >::type Nc(NcSEXP);
    Rcpp::traits::input_parameter< const int& >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_s_2D(y, rowi, coli, L, iter, a, b, N1, Nr, Nc, bsize, lr_param, lr_type, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_s_2D_t1
List doVB_pois_s_2D_t1(const arma::vec& y, const arma::uvec& rowi, const arma::uvec& coli, const int& L, const int& iter, const double& a, const double& b, const double& N1, const int& Nr, const int& Nc, const int& bsize, const arma::vec& lr_param, const std::string& lr_type, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_s_2D_t1(SEXP ySEXP, SEXP rowiSEXP, SEXP coliSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP N1SEXP, SEXP NrSEXP, SEXP NcSEXP, SEXP bsizeSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type rowi(rowiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type coli(coliSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Nr(NrSEXP);
    Rcpp::traits::input_parameter< const int& >::type Nc(NcSEXP);
    Rcpp::traits::input_parameter< const int& >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_s_2D_t1(y, rowi, coli, L, iter, a, b, N1, Nr, Nc, bsize, lr_param, lr_type, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_s_2D_ww
List doVB_pois_s_2D_ww(const arma::vec& y, const arma::uvec& rowi, const arma::uvec& coli, const int& L, const int& iter, const arma::field<arma::vec>& weight, const double& a, const double& b, const double& N1, const int& Nr, const int& Nc, const int& bsize, const arma::vec& lr_param, const std::string& lr_type, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_s_2D_ww(SEXP ySEXP, SEXP rowiSEXP, SEXP coliSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP weightSEXP, SEXP aSEXP, SEXP bSEXP, SEXP N1SEXP, SEXP NrSEXP, SEXP NcSEXP, SEXP bsizeSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type rowi(rowiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type coli(coliSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Nr(NrSEXP);
    Rcpp::traits::input_parameter< const int& >::type Nc(NcSEXP);
    Rcpp::traits::input_parameter< const int& >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_s_2D_ww(y, rowi, coli, L, iter, weight, a, b, N1, Nr, Nc, bsize, lr_param, lr_type, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_s_2D_bin
List doVB_pois_s_2D_bin(const std::string& filepath_x, const std::string& filepath_y, const int& L, const int& iter, const double& a, const double& b, const double& N1, const int& Nr, const int& Nc, const int& bsize, const arma::vec& lr_param, const std::string& lr_type, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_s_2D_bin(SEXP filepath_xSEXP, SEXP filepath_ySEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP N1SEXP, SEXP NrSEXP, SEXP NcSEXP, SEXP bsizeSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filepath_x(filepath_xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filepath_y(filepath_ySEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Nr(NrSEXP);
    Rcpp::traits::input_parameter< const int& >::type Nc(NcSEXP);
    Rcpp::traits::input_parameter< const int& >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_s_2D_bin(filepath_x, filepath_y, L, iter, a, b, N1, Nr, Nc, bsize, lr_param, lr_type, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_offset_sp
List doVB_pois_offset_sp(const int& N, const arma::vec& yv, const arma::uvec& yi, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const int& D, const int& L, const arma::vec& tau, const int& iter, const double& a, const double& b, arma::mat& V, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_offset_sp(SEXP NSEXP, SEXP yvSEXP, SEXP yiSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP DSEXP, SEXP LSEXP, SEXP tauSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_offset_sp(N, yv, yi, xi, xp, varind, D, L, tau, iter, a, b, V, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doVB_pois_offset
List doVB_pois_offset(const arma::vec& y, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const int& D, const int& L, const arma::vec& tau, const int& iter, const double& a, const double& b, arma::mat& V, const bool& display_progress);
RcppExport SEXP _moltenNMF_doVB_pois_offset(SEXP ySEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP DSEXP, SEXP LSEXP, SEXP tauSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doVB_pois_offset(y, xi, xp, varind, D, L, tau, iter, a, b, V, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doSVB_pois_sp
List doSVB_pois_sp(const int& N, const arma::vec& yv, const arma::uvec& yi, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const int& bsize, const arma::vec& lr_param, const std::string& lr_type, const bool& display_progress);
RcppExport SEXP _moltenNMF_doSVB_pois_sp(SEXP NSEXP, SEXP yvSEXP, SEXP yiSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP bsizeSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const int& >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doSVB_pois_sp(N, yv, yi, xi, xp, varind, D, L, iter, a, b, V, bsize, lr_param, lr_type, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doSVB_pois_sp2
List doSVB_pois_sp2(const int& N, const arma::vec& yv, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const arma::vec& probX0, const double& N0, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const int& bsize, const arma::vec& lr_param, const std::string& lr_type, const bool& display_progress);
RcppExport SEXP _moltenNMF_doSVB_pois_sp2(SEXP NSEXP, SEXP yvSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP probX0SEXP, SEXP N0SEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP bsizeSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probX0(probX0SEXP);
    Rcpp::traits::input_parameter< const double& >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const int& >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doSVB_pois_sp2(N, yv, xi, xp, varind, probX0, N0, D, L, iter, a, b, V, bsize, lr_param, lr_type, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// doSVB_pois_sp3
List doSVB_pois_sp3(const int& N, const arma::vec& yv, const arma::uvec& xi, const arma::uvec& xp, const arma::uvec& varind, const arma::uvec& xp0, const double& N0, const int& D, const int& L, const int& iter, const double& a, const double& b, arma::mat& V, const int& bsize, const arma::vec& lr_param, const std::string& lr_type, const bool& display_progress);
RcppExport SEXP _moltenNMF_doSVB_pois_sp3(SEXP NSEXP, SEXP yvSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP varindSEXP, SEXP xp0SEXP, SEXP N0SEXP, SEXP DSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP, SEXP bsizeSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type varind(varindSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp0(xp0SEXP);
    Rcpp::traits::input_parameter< const double& >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const int& >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(doSVB_pois_sp3(N, yv, xi, xp, varind, xp0, N0, D, L, iter, a, b, V, bsize, lr_param, lr_type, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// check_lr
double check_lr(const int& epoc, const arma::vec& lr_param, const std::string& lr_type);
RcppExport SEXP _moltenNMF_check_lr(SEXP epocSEXP, SEXP lr_paramSEXP, SEXP lr_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type epoc(epocSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lr_param(lr_paramSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lr_type(lr_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(check_lr(epoc, lr_param, lr_type));
    return rcpp_result_gen;
END_RCPP
}
// summyprod
arma::vec summyprod(const int& n, const arma::uvec& xi, const arma::uvec& xp, const arma::mat& lam);
RcppExport SEXP _moltenNMF_summyprod(SEXP nSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(summyprod(n, xi, xp, lam));
    return rcpp_result_gen;
END_RCPP
}
// NegBin_lp
arma::mat NegBin_lp(const arma::vec& y, const int& np, const arma::uvec& xi, const arma::uvec& xp, const arma::mat& alpha, const arma::mat& beta, const double& tau);
RcppExport SEXP _moltenNMF_NegBin_lp(SEXP ySEXP, SEXP npSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type np(npSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(NegBin_lp(y, np, xi, xp, alpha, beta, tau));
    return rcpp_result_gen;
END_RCPP
}
// Poisson_lp
arma::mat Poisson_lp(const arma::vec& y, const int& np, const arma::uvec& xi, const arma::uvec& xp, const arma::mat& alpha, const arma::mat& beta);
RcppExport SEXP _moltenNMF_Poisson_lp(SEXP ySEXP, SEXP npSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type np(npSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(Poisson_lp(y, np, xi, xp, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// PoissonGamma_rng
arma::mat PoissonGamma_rng(int N, int np, arma::uvec xi, arma::uvec xp, arma::mat alpha, arma::mat beta);
RcppExport SEXP _moltenNMF_PoissonGamma_rng(SEXP NSEXP, SEXP npSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(PoissonGamma_rng(N, np, xi, xp, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// NegbinGamma_rng
arma::mat NegbinGamma_rng(int N, int np, arma::uvec xi, arma::uvec xp, arma::mat alpha, arma::mat beta, double tau);
RcppExport SEXP _moltenNMF_NegbinGamma_rng(SEXP NSEXP, SEXP npSEXP, SEXP xiSEXP, SEXP xpSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(NegbinGamma_rng(N, np, xi, xp, alpha, beta, tau));
    return rcpp_result_gen;
END_RCPP
}
// obsfitloss_mtx
List obsfitloss_mtx(const std::string& readtxt, arma::mat fit, const int& n_header);
RcppExport SEXP _moltenNMF_obsfitloss_mtx(SEXP readtxtSEXP, SEXP fitSEXP, SEXP n_headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type readtxt(readtxtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_header(n_headerSEXP);
    rcpp_result_gen = Rcpp::wrap(obsfitloss_mtx(readtxt, fit, n_header));
    return rcpp_result_gen;
END_RCPP
}
// rowmeanvar_mtx
List rowmeanvar_mtx(const int& n_row, const int& n_col, const std::string& readtxt, const int& n_header);
RcppExport SEXP _moltenNMF_rowmeanvar_mtx(SEXP n_rowSEXP, SEXP n_colSEXP, SEXP readtxtSEXP, SEXP n_headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n_row(n_rowSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_col(n_colSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type readtxt(readtxtSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_header(n_headerSEXP);
    rcpp_result_gen = Rcpp::wrap(rowmeanvar_mtx(n_row, n_col, readtxt, n_header));
    return rcpp_result_gen;
END_RCPP
}
// rowfilter_mtx
void rowfilter_mtx(const std::string& readtxt, const std::string& writetxt, const arma::vec& rowind);
RcppExport SEXP _moltenNMF_rowfilter_mtx(SEXP readtxtSEXP, SEXP writetxtSEXP, SEXP rowindSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type readtxt(readtxtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type writetxt(writetxtSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type rowind(rowindSEXP);
    rowfilter_mtx(readtxt, writetxt, rowind);
    return R_NilValue;
END_RCPP
}
// read_mtx
List read_mtx(const std::string& readtxt, const arma::uvec& bag, const int& x_dim);
RcppExport SEXP _moltenNMF_read_mtx(SEXP readtxtSEXP, SEXP bagSEXP, SEXP x_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type readtxt(readtxtSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type bag(bagSEXP);
    Rcpp::traits::input_parameter< const int& >::type x_dim(x_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(read_mtx(readtxt, bag, x_dim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_moltenNMF_read_bin", (DL_FUNC) &_moltenNMF_read_bin, 4},
    {"_moltenNMF_doVB_negbin", (DL_FUNC) &_moltenNMF_doVB_negbin, 11},
    {"_moltenNMF_doVB_pois", (DL_FUNC) &_moltenNMF_doVB_pois, 11},
    {"_moltenNMF_doVB_pois_sp", (DL_FUNC) &_moltenNMF_doVB_pois_sp, 13},
    {"_moltenNMF_doVB_pois_sp2", (DL_FUNC) &_moltenNMF_doVB_pois_sp2, 14},
    {"_moltenNMF_doVB_pois_sp3", (DL_FUNC) &_moltenNMF_doVB_pois_sp3, 13},
    {"_moltenNMF_doVB_pois_2D", (DL_FUNC) &_moltenNMF_doVB_pois_2D, 10},
    {"_moltenNMF_doVB_pois_2D_ww", (DL_FUNC) &_moltenNMF_doVB_pois_2D_ww, 11},
    {"_moltenNMF_doVB_pois_s_2D", (DL_FUNC) &_moltenNMF_doVB_pois_s_2D, 14},
    {"_moltenNMF_doVB_pois_s_2D_t1", (DL_FUNC) &_moltenNMF_doVB_pois_s_2D_t1, 14},
    {"_moltenNMF_doVB_pois_s_2D_ww", (DL_FUNC) &_moltenNMF_doVB_pois_s_2D_ww, 15},
    {"_moltenNMF_doVB_pois_s_2D_bin", (DL_FUNC) &_moltenNMF_doVB_pois_s_2D_bin, 13},
    {"_moltenNMF_doVB_pois_offset_sp", (DL_FUNC) &_moltenNMF_doVB_pois_offset_sp, 14},
    {"_moltenNMF_doVB_pois_offset", (DL_FUNC) &_moltenNMF_doVB_pois_offset, 12},
    {"_moltenNMF_doSVB_pois_sp", (DL_FUNC) &_moltenNMF_doSVB_pois_sp, 16},
    {"_moltenNMF_doSVB_pois_sp2", (DL_FUNC) &_moltenNMF_doSVB_pois_sp2, 17},
    {"_moltenNMF_doSVB_pois_sp3", (DL_FUNC) &_moltenNMF_doSVB_pois_sp3, 17},
    {"_moltenNMF_check_lr", (DL_FUNC) &_moltenNMF_check_lr, 3},
    {"_moltenNMF_summyprod", (DL_FUNC) &_moltenNMF_summyprod, 4},
    {"_moltenNMF_NegBin_lp", (DL_FUNC) &_moltenNMF_NegBin_lp, 7},
    {"_moltenNMF_Poisson_lp", (DL_FUNC) &_moltenNMF_Poisson_lp, 6},
    {"_moltenNMF_PoissonGamma_rng", (DL_FUNC) &_moltenNMF_PoissonGamma_rng, 6},
    {"_moltenNMF_NegbinGamma_rng", (DL_FUNC) &_moltenNMF_NegbinGamma_rng, 7},
    {"_moltenNMF_obsfitloss_mtx", (DL_FUNC) &_moltenNMF_obsfitloss_mtx, 3},
    {"_moltenNMF_rowmeanvar_mtx", (DL_FUNC) &_moltenNMF_rowmeanvar_mtx, 4},
    {"_moltenNMF_rowfilter_mtx", (DL_FUNC) &_moltenNMF_rowfilter_mtx, 3},
    {"_moltenNMF_read_mtx", (DL_FUNC) &_moltenNMF_read_mtx, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_moltenNMF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
